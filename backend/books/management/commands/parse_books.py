from django.core.management.base import BaseCommand
import requests
from bs4 import BeautifulSoup
from books.models import Book
from urllib.parse import urljoin


class Command(BaseCommand):
    help = '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤, –∑–æ–±—Ä–∞–∂–µ–Ω—å, –∂–∞–Ω—Ä—É —Ç–∞ —Ä–æ–∫—É –∫–Ω–∏–≥ –∑ –æ–¥–Ω—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏'

    def handle(self, *args, **kwargs):
        base_url = "https://books.toscrape.com/"
        headers = {
            'User-Agent': (
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                'AppleWebKit/537.36 (KHTML, like Gecko) '
                'Chrome/113.0.0.0 Safari/537.36'
            )
        }

        response = requests.get(base_url, headers=headers)
        if response.status_code != 200:
            self.stdout.write(self.style.ERROR(f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}"))
            return

        soup = BeautifulSoup(response.text, 'html.parser')
        book_items = soup.select('article.product_pod')

        if not book_items:
            self.stdout.write(self.style.WARNING("–ö–Ω–∏–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"))
            return

        for book in book_items:
            title = book.h3.a['title'].strip()

            # –û—Ç—Ä–∏–º—É—î–º–æ "—Å–∏—Ä–∏–π" —à–ª—è—Ö –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Ç–∏–ø—É ../../media/cache/...
            image_relative_url = book.select_one('img')['src']

            # –û—á–∏—â—É—î–º–æ —à–ª—è—Ö, –≤–∏–¥–∞–ª—è—é—á–∏ –≤—Å—ñ '../' –∑–≤–µ—Ä—Ö—É
            while image_relative_url.startswith('../'):
                image_relative_url = image_relative_url[3:]

            # –¢–µ–ø–µ—Ä —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
            image_url = urljoin(base_url, image_relative_url)

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π URL –¥–æ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–Ω–∏–≥–∏
            detail_relative_url = book.h3.a['href']
            detail_url = urljoin(base_url, detail_relative_url)

            genre = ''
            year = None  # –ù–∞ —Ü—å–æ–º—É —Å–∞–π—Ç—ñ —Ä–æ–∫—É –Ω–µ–º–∞—î

            # –û—Ç—Ä–∏–º—É—î–º–æ –∂–∞–Ω—Ä —ñ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (breadcrumb)
            detail_resp = requests.get(detail_url, headers=headers)
            if detail_resp.status_code == 200:
                detail_soup = BeautifulSoup(detail_resp.text, 'html.parser')
                breadcrumb_items = detail_soup.select('ul.breadcrumb li a')
                if len(breadcrumb_items) >= 3:
                    genre = breadcrumb_items[2].text.strip()
            else:
                self.stdout.write(self.style.WARNING(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ –¥–ª—è –∫–Ω–∏–≥–∏: {title}"))

            # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–∏–≥—É –≤ –±–∞–∑—ñ
            book_obj, created = Book.objects.update_or_create(
                title=title,
                defaults={
                    'author': '',
                    'genre': genre,
                    'year': year,
                    'rating': None,
                    'description': '',
                    'image_url': image_url,
                }
            )
            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úÖ –î–æ–¥–∞–Ω–æ: {title} (–ñ–∞–Ω—Ä: {genre})"))
            else:
                self.stdout.write(self.style.SUCCESS(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: {title} (–ñ–∞–Ω—Ä: {genre})"))
