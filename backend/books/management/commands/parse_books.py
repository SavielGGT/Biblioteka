from django.core.management.base import BaseCommand
import requests
from bs4 import BeautifulSoup
from books.models import Book
from urllib.parse import urljoin


class Command(BaseCommand):
    help = '–ü–∞—Ä—Å–∏–Ω–≥ –∫–Ω–∏–≥ –∑ books.toscrape.com (–Ω–∞–∑–≤–∞, –∂–∞–Ω—Ä, —Ü—ñ–Ω–∞, –ª–æ–∫–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)'

    def handle(self, *args, **kwargs):
        base_url = "https://books.toscrape.com/"
        headers = {
            'User-Agent': (
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                'AppleWebKit/537.36 (KHTML, like Gecko) '
                'Chrome/113.0.0.0 Safari/537.36'
            )
        }

        response = requests.get(base_url, headers=headers)
        if response.status_code != 200:
            self.stdout.write(self.style.ERROR(f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}"))
            return

        soup = BeautifulSoup(response.text, 'html.parser')
        book_items = soup.select('article.product_pod')

        if not book_items:
            self.stdout.write(self.style.WARNING("–ö–Ω–∏–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"))
            return

        for book in book_items:
            title = book.h3.a['title'].strip()

            # –í–∏—Ç—è–≥—É—î–º–æ —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–≤—ñ–¥–Ω–æ—Å–Ω–∏–π, —Ç–∏–ø—É '../../media/cache/...')
            img_tag = book.select_one('img')
            raw_img_url = img_tag['src']  # –ø—Ä–∏–∫–ª–∞–¥: '../../media/cache/xx/xx/image.jpg'

            # –û—á–∏—Å—Ç–∏–º–æ —à–ª—è—Ö: –∑–∞–±–µ—Ä–µ–º–æ '../' –Ω–∞ –ø–æ—á–∞—Ç–∫—É, –æ—Ç—Ä–∏–º–∞—î–º–æ 'media/cache/...'
            if raw_img_url.startswith('../../'):
                local_img_path = raw_img_url.replace('../../', '', 1)
            else:
                local_img_path = raw_img_url.lstrip('/')

            # –ü–æ–≤–Ω–∞ URL-–∞–¥—Ä–µ—Å–∞ –Ω–∞ —Å–∞–π—Ç—ñ (–Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, –∞–ª–µ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ)
            # full_image_url = urljoin(base_url, raw_img_url)

            # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–Ω–∏–≥–∏
            detail_relative_url = book.h3.a['href']
            detail_url = urljoin(base_url, detail_relative_url)

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            genre = ''
            price = None

            # –î–µ—Ç–∞–ª—ñ –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            detail_resp = requests.get(detail_url, headers=headers)
            if detail_resp.status_code == 200:
                detail_soup = BeautifulSoup(detail_resp.text, 'html.parser')

                # –ñ–∞–Ω—Ä
                breadcrumb_items = detail_soup.select('ul.breadcrumb li a')
                if len(breadcrumb_items) >= 3:
                    genre = breadcrumb_items[2].text.strip()

                # –¶—ñ–Ω–∞
                price_tag = detail_soup.select_one('p.price_color')
                if price_tag:
                    try:
                        price_text = price_tag.text.strip()
                        price = float(price_text.replace('¬£', ''))
                    except ValueError:
                        price = None

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            book_obj, created = Book.objects.update_or_create(
                title=title,
                defaults={
                    'author': '',
                    'genre': genre,
                    'year': None,
                    'price': price,
                    'rating': None,
                    'description': '',
                    'image_url': local_img_path,  # ‚úÖ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö
                }
            )

            if created:
                self.stdout.write(self.style.SUCCESS(f"‚úÖ –î–æ–¥–∞–Ω–æ: {title}"))
            else:
                self.stdout.write(self.style.SUCCESS(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: {title}"))
